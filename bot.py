import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
import requests
from requests.exceptions import Timeout, RequestException

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TOKEN = os.getenv('BOT_TOKEN') or '8008209339:AAHfqQcOnF81bC4GeceqI-DYZEqGljDBw6E'
API_TOKEN = os.getenv('API_TOKEN') or 'io-v2-...'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å', parse_mode='HTML')


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
@dp.message()
async def filter_messages(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_message = await message.reply("üß† –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...")

    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"  # –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_TOKEN}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    }

    data = {
        "model": "deepseek-ai/DeepSeek-R1-0528",
        "messages": [
            {
                "role": "system",
                "content": "You are a helpful assistant"
            },
            {
                "role": "user",
                "content": message.text
            }
        ],
    }

    try:
        # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ 120 —Å–µ–∫—É–Ω–¥
        response = requests.post(url, headers=headers, json=data, timeout=120)

        if response.status_code != 200:
            await thinking_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return

        data_response = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
        if 'choices' not in data_response or not data_response['choices']:
            await thinking_message.edit_text("‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            return

        text = data_response['choices'][0]['message']['content']

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è split
        if '</think>' in text and '\n\n' in text:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ </think> –∏ \n\n –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–º–µ—Å—Ç–µ
            parts = text.split('</think>\n\n', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if len(parts) > 1:
                bot_text = parts[1]
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ \n\n —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ </think>, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ \n
                parts_alt = text.split('</think>\n', 1)
                if len(parts_alt) > 1:
                    bot_text = parts_alt[1]
                else:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    bot_text = text
        else:
            bot_text = text

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é", –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.answer, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if len(bot_text) > 4096:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ —á–∞—Å—Ç—è–º–∏
            # –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–∞–π–ª. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            part_text = bot_text[:4000] + "\n\n(–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
            await thinking_message.edit_text(part_text, parse_mode="Markdown")
        else:
            await thinking_message.edit_text(bot_text, parse_mode="Markdown")

    except Timeout:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        await thinking_message.edit_text(
            "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logging.warning(f"Request to {url} timed out for user message: {message.text}")
    except RequestException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        logging.error(f"Network error during request: {e}")
        await thinking_message.edit_text(
            "üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logging.error(f"Unexpected error processing message: {e}", exc_info=True)
        await thinking_message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())