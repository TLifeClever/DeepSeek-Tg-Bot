import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
import requests

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TOKEN = os.getenv('BOT_TOKEN') or '8008209339:AAHfqQcOnF81bC4GeceqI-DYZEqGljDBw6E'
API_TOKEN = os.getenv('API_TOKEN') or 'io-v2-...'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å', parse_mode='HTML')


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
@dp.message()
async def filter_messages(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_message = await message.reply("üß† –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...")

    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"  # –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_TOKEN}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    }

    data = {
        "model": "deepseek-ai/DeepSeek-R1-0528",
        "messages": [
            {
                "role": "system",
                "content": "You are a helpful assistant"
            },
            {
                "role": "user",
                "content": message.text
            }
        ],
    }

    try:
        # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(url, headers=headers, json=data, timeout=60)  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç

        if response.status_code != 200:
            await thinking_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –µ—Å–ª–∏ edit_text –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: await message.answer(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return

        data_response = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
        if 'choices' not in data_response or not data_response['choices']:
            await thinking_message.edit_text("‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            return

        text = data_response['choices'][0]['message']['content']

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è split
        if '</think>' in text and '\n\n' in text:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ </think> –∏ \n\n –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–º–µ—Å—Ç–µ
            parts = text.split('</think>\n\n', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if len(parts) > 1:
                bot_text = parts[1]
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ \n\n —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ </think>, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ \n
                parts_alt = text.split('</think>\n', 1)
                if len(parts_alt) > 1:
                    bot_text = parts_alt[1]
                else:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    bot_text = text
        else:
            bot_text = text

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é", –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.answer, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await thinking_message.edit_text(bot_text, parse_mode="Markdown")

    except asyncio.TimeoutError:
        await thinking_message.edit_text("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except requests.exceptions.RequestException as e:
        logging.error(f"Network error: {e}")
        await thinking_message.edit_text("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"Error processing message: {e}")
        await thinking_message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())